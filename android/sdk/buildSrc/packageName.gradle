/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
task copyProguard(type: Copy){
    if(!project.useApachePackageName){
        inputs.file new File('proguard-rules.pro')
        from new File('proguard-rules.pro')
        into new File('.')
        rename 'proguard-rules.pro', 'proguard-rules-legacy.pro'
        filter { String line ->
            line.replaceAll(/(org\.apache)(\.weex.*)/, { _, packageName, suffix ->
                "com.taobao${suffix}"
            })
        }
    }
}

task copyAndRenamePackage(type: Copy) {
    dependsOn copyProguard
    if(!project.useApachePackageName) {
        inputs.dir new File('src/main/java/org/apache/weex')
        from new File('src/main/java/org/apache/weex')
        into new File('src/legacyRelease/java/com/taobao/weex')
        filter { String line ->
            line.replaceAll(/^(package org\.apache)(\.weex.*)$/, { _, packageName, suffix ->
                "package com.taobao${suffix}"
            }).replaceAll(/^(import org\.apache)(\.weex.*)$/, { _, packageName, suffix ->
                "import com.taobao${suffix}"
            }).replaceAll(/^(import static org\.apache)(\.weex.*)$/, { _, packageName, suffix ->
                "import static com.taobao${suffix}"
            })
        }
    }
}

task copyManifest(type: Copy){
    dependsOn copyProguard
    if(!project.useApachePackageName){
        inputs.file new File('src/main/AndroidManifest.xml')
        from new File('src/main/AndroidManifest.xml')
        into new File('src/legacyRelease')
        filter { String line ->
            line.replaceAll(/(org\.apache)(\.weex.*)/, { _, packageName, suffix ->
                "com.taobao${suffix}"
            })
        }
    }
}

//task(cleanCopyProguard, overwrite: true, type: Delete){
//    delete 'proguard-rules-legacy.pro'
//}

gradle.taskGraph.beforeTask { Task task ->
    if(task.name == 'assembleApacheRelease'){
        throw new StopActionException('Not Supported. assembleApacheRelease is not supported, please use the following command instead.\n assembleRelease -PapachePackageName="true"')
    }
    else if(task.name == 'assembleLegacyRelease'){
        throw new StopActionException('Not Supported. assembleLegacyRelease is not supported, please use the following command instead.\n assembleRelease -PapachePackageName="false"')
    }
}



/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

def jsc_dir = new File(project.buildDir, 'jsc')
def jsc_url = project.hasProperty('jsc_url') ? new URL(project.getProperty('jsc_url').toString()) : new URL('https://www.n7shadowjoker.com/download/jsc-android-2026004.0.1.tgz')
def aar_name = project.hasProperty('aar_name') ? project.getProperty('aar_name').toString() : 'android-jsc-intl'

def jsc_file = new File(jsc_dir, jsc_url.path.split('/').last())
def aar_file = new File(jsc_dir, "${aar_name}.aar")

def downloadJSC = { URL url, File dest ->
    if (!dest.getParentFile().exists()) {
        dest.getParentFile().mkdirs()
    }
    url.withInputStream { i -> dest.withOutputStream { it << i } }
}

task download(){
    inputs.property('url', jsc_url)
    outputs.file(jsc_file)
    outputs.upToDateWhen {
        jsc_file.exists()
    }
    doFirst {
        if (!jsc_file.exists()) {
            downloadJSC(jsc_url, jsc_file)
        }
    }
}

task unzipJSC(type: Copy, dependsOn: download) {
    dependsOn copyProguard
    from jsc_file.name.endsWith(".aar") ? jsc_file : tarTree(jsc_file)
    into jsc_dir
    include "**/*${aar_name}*.aar", '**/include/*.h'
    includeEmptyDirs false
    eachFile {
        if(it.name.endsWith('.aar')) {
            it.path = it.name
            it.name = "${aar_name}.aar"
        }
        else if(it.name.endsWith('.h')){
            it.path= 'include/' + it.name
        }
    }
    inputs.file(jsc_file)
    outputs.file(aar_file)
    outputs.upToDateWhen {
        aar_file.exists()
    }
}

task copyJSCHeaderToWeexCore(type: Copy, dependsOn: unzipJSC) {
    dependsOn copyProguard
    from new File(jsc_dir, 'include')
    into '../../weex_core/Source/include/JSCHeaderNew/JavaScriptCore'
    includeEmptyDirs false
    inputs.dir(new File(jsc_dir, 'include'))
}


task copyOtherCppFile(type: Copy){
    dependsOn copyJSCHeaderToWeexCore
    if(!project.useApachePackageName) {
        inputs.dir new File('../../weex_core')
        from new File('../../weex_core')
        into new File('src/legacyRelease/cpp')
        exclude '**/*.cpp', '**/*.cc', '**/*.c', '**/*.h', '**/*.hpp'
    }
}

task copyAndRenameCppSourceFile(type: Copy){
    dependsOn copyOtherCppFile, copyJSCHeaderToWeexCore
    if(!project.useApachePackageName) {
        inputs.dir new File('../../weex_core')
        from new File('../../weex_core')
        into new File('src/legacyRelease/cpp')
        include '**/*.cpp', '**/*.cc', '**/*.c', '**/*.h', '**/*.hpp'
        filter { String line ->
            line.replaceAll('(.*".*)(org/apache/weex)(.*".*)', { _, prefix, packageName, suffix ->
                logger.info("Content substation in .cpp/.h files happpened, \n Input: ${line}, \n Output: ${prefix}com/taobao/weex${suffix}")
                "${prefix}com/taobao/weex${suffix}"
            })
        }
    }
}

task copyJscToJniDir(type: Copy, dependsOn: unzipJSC) {
    def libsDir = project.android.sourceSets.main.jniLibs.srcDirs[-1]
    from zipTree(aar_file)
    into libsDir
    include 'jni/**/*.so'
    exclude '**/libweexcore.so', '**/libweexjsb.so', '**/libweexjss.so',
            '**/libweexjssr.so', '**/libweexjst.so', '**/libc++_shared.so'
    includeEmptyDirs false
    eachFile {
        def path_list = new LinkedList<>(it.relativePath.segments.toList())
        path_list.removeAt(0)
        it.relativePath = new RelativePath(true, path_list[0], path_list[1])
    }
    inputs.file(aar_file)
    outputs.upToDateWhen {false}
}

preBuild.dependsOn copyJscToJniDir, copyAndRenameCppSourceFile, copyAndRenamePackage, copyManifest, copyProguard
clean.dependsOn cleanCopyJscToJniDir, cleanCopyAndRenamePackage, cleanCopyManifest, cleanCopyProguard, cleanCopyOtherCppFile, cleanCopyAndRenameCppSourceFile